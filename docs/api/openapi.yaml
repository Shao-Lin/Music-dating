openapi: 3.0.1
info:
  title: Vibe API
  version: "1.0.0"
  description: |
    REST API музыкального дейтинга **Vibe**.  
    Авторизация через JWT-токены (Bearer) + Refresh-токены.  
    Все даты — в формате `yyyy-MM-dd`, время — ISO 8601.

servers:
  - url: http://localhost:8080
    description: Local dev

security:
  - BearerAuth: [ ]

tags:
  - name: Auth
    description: Регистрация и аутентификация
  - name: Users
    description: Поиск, лайки, дизлайки, мэтчи
  - name: User
    description: Личный профиль и фото
  - name: Chat
    description: Диалоги и сообщения

paths:

  /auth/register:
    post:
      tags: [ Auth ]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            encoding:
              image:
                contentType: image/jpeg
      responses:
        '200':
          description: Пользователь создан
          content:
            text/plain:
              schema:
                type: string
                example: User register successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Логин (получение Access и Refresh токенов)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
            examples:
              default:
                value: { login: alice, password: pa$$w0rd }
      responses:
        '200':
          description: Токены выданы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                default:
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refreshToken: 3d5e0c0b-…
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/refresh:
    post:
      tags: [ Auth ]
      summary: Обновление Access-токена
      parameters:
        - in: header
          name: Authorization
          required: true
          schema: { type: string, example: Bearer 3d5e0c0b-… }
          description: Refresh-токен в формате `Bearer <token>`
      responses:
        '200':
          description: Новый Access-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    delete:
      tags: [ Auth ]
      summary: Выход и отзыв Refresh-токена
      parameters:
        - in: header
          name: Authorization
          required: true
          schema: { type: string, example: Bearer 3d5e0c0b-… }
      responses:
        '200':
          description: Refresh-токен удалён
          content:
            text/plain:
              schema:
                type: string
                example: Logout successfully

  /auth/request-code:
    post:
      tags: [ Auth ]
      summary: Запросить OTP-код на почту
      parameters:
        - in: query
          name: email
          required: true
          schema: { type: string, format: email, example: alice@example.com }
      responses:
        '200': { description: Код выслан }

  /auth/verify-code:
    post:
      tags: [ Auth ]
      summary: Подтвердить OTP-код
      parameters:
        - in: query
          name: email
          required: true
          schema: { type: string, format: email }
        - in: query
          name: code
          required: true
          schema: { type: string, example: "123456" }
      responses:
        '200': { description: Код верен }
        '401':
          description: Неверный код
          content:
            text/plain:
              schema: { type: string, example: Invalid code }

  /users/recommendations:
    get:
      tags: [ Users ]
      summary: Список нерекомендованных (непросмотренных) пользователей
      parameters:
        - in: query
          name: page
          required: true
          schema: { type: integer, example: 0 }
        - in: query
          name: size
          required: true
          schema: { type: integer, example: 20 }
      responses:
        '200':
          description: Множество пользователей
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/matches:
    get:
      tags: [ Users ]
      summary: Мои взаимные мэтчи
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/likes/incoming:
    get:
      tags: [ Users ]
      summary: Кто меня лайкнул
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/{targetId}/like:
    post:
      tags: [ Users ]
      summary: Поставить лайк пользователю
      parameters:
        - in: path
          name: targetId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Результат реакции
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionResponse' }
              examples:
                mutual:
                  value: { mutualMatch: true }
                not-mutual:
                  value: { mutualMatch: false }
      security: [ { BearerAuth: [ ] } ]

  /users/{targetId}/dislike:
    post:
      tags: [ Users ]
      summary: Дизлайк пользователя
      parameters:
        - $ref: '#/components/parameters/TargetId'
      responses:
        '204': { description: Дизлайк сохранён }
      security: [ { BearerAuth: [ ] } ]

  /user/me:
    get:
      tags: [ User ]
      summary: Профиль текущего пользователя
      responses:
        '200':
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /user/upload-photo:
    post:
      tags: [ User ]
      summary: Загрузить фото
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        '201': { description: Фото загружено }
        '400': { $ref: '#/components/responses/BadRequest' }
      security: [ { BearerAuth: [ ] } ]

  /user/{photo-id}/delete-photo:
    delete:
      tags: [ User ]
      summary: Удалить своё фото
      parameters:
        - in: path
          name: photo-id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: Фото удалено }
      security: [ { BearerAuth: [ ] } ]
      
  /user/edit-avatar:
    patch:
      tags: [ User ]
      summary: Обновить аватар пользователя
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Новый аватар (jpeg/png)
      responses:
        '204':
          description: Аватар обновлён
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security: [ { BearerAuth: [ ] } ]

  /chat:
    post:
      tags: [ Chat ]
      summary: Создать (или вернуть существующий) чат с участниками
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatRequest'
            examples:
              one-to-one:
                value: { participants: [ "e4c8d9ad-7f99-42f0-8a0d-8a7b51d4d3ef" ] }
      responses:
        '201':
          description: Чат создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ChatDto' }
        '409':
          description: Чат уже существует — вернётся тот же объект
      security: [ { BearerAuth: [ ] } ]

    get:
      tags: [ Chat ]
      summary: Мои чаты (последнее сообщение + статус online)
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ChatDto' }
      security: [ { BearerAuth: [ ] } ]

  /chat/{chatId}/messages:
    parameters:
      - name: chatId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [ Chat ]
      summary: История сообщений (постранично, newest → oldest)
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 30 }
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessage'
      security: [ { BearerAuth: [ ] } ]

    post:
      tags: [ Chat ]
      summary: Отправить сообщение
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            encoding:
              files: { contentType: "*/*" }
      responses:
        '201':
          description: Сообщение сохранено и отправлено по WebSocket
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MessageDto' }
      security: [ { BearerAuth: [ ] } ]

components:

  schemas:

    # ---- chat level ----
    CreateChatRequest:
      type: object
      required: [ participants ]
      properties:
        participants:
          type: array
          items: { type: string, format: uuid }
          description: UUID'ы собеседников (кроме самого автора)

    ChatDto:
      type: object
      properties:
        id:            { type: string, example: 6632fe2287791473c7141eea }
        participantIds:
          type: array
          items: { type: string, format: uuid }
        lastMessage:   { $ref: '#/components/schemas/MessagePreview' }
        online:        { type: boolean, description: "true, если хотя бы один собеседник онлайн" }
        updatedAt:     { type: string, format: date-time }

    # ---- message level ----
    SendMessageRequest:
      type: object
      properties:
        text:  { type: string }
        files:
          type: array
          items: { type: string, format: binary }
          description: вложения (0..n)

    MessagePreview:
      type: object
      properties:
        id:        { type: string }
        snippet:   { type: string, example: "Привет!" }
        createdAt: { type: string, format: date-time }

    MessageDto:
      type: object
      properties:
        id:        { type: string }
        chatId:    { type: string }
        senderId:  { type: string, format: uuid }
        text:      { type: string, nullable: true }
        attachments:
          type: array
          items:
            type: string
            format: uri
        createdAt: { type: string, format: date-time }

    PageMessage:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/MessageDto' }
        totalPages:  { type: integer }
        totalItems:  { type: integer }
        page:        { type: integer }
        size:        { type: integer }
  


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TargetId:
      in: path
      name: targetId
      required: true
      schema: { type: string, format: uuid }

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    Unauthorized:
      description: Требуется аутентификация
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }


    RegisterRequest:
      type: object
      required: [ name, birthDate, gender, login, password ]
      properties:
        name:      { type: string, example: Alice }
        about:     { type: string, example: "Люблю инди-рок" }
        birthDate: { type: string, format: date, example: 1998-05-12 }
        city:      { type: string, example: Moscow }
        gender:    { type: string, example: female }
        login:     { type: string, example: alice }
        password:  { type: string, example: pa$$w0rd }
        image:
          type: string
          format: binary
          description: Аватар (jpeg/png)

    AuthRequest:
      type: object
      required: [ login, password ]
      properties:
        login:    { type: string }
        password: { type: string }

    AuthResponse:
      type: object
      properties:
        accessToken:  { type: string }
        refreshToken: { type: string }

    ReactionResponse:
      type: object
      properties:
        mutualMatch: { type: boolean }

    UserDto:
      type: object
      properties:
        id:         { type: string, format: uuid, example: d290f1ee-6c54-4b01-90e6-d701748f0851 }
        username:   { type: string, example: alice }
        name:       { type: string, example: Alice }
        about:      { type: string, example: "Люблю инди-рок и винил" }
        birthDate:  { type: string, format: date, example: 1998-05-12 }
        city:       { type: string, example: Moscow }
        gender:     { type: string, example: female }
        avatarUrl:  { type: string, format: uri, example: "https://cdn.vibe.app/avatars/alice.jpg" }
        photos:
          type: array
          items: { $ref: '#/components/schemas/UserPhotoDto' }
        tracks:
          type: array
          items: { $ref: '#/components/schemas/TrackDto' }

    UserPhotoDto:
      type: object
      properties:
        id:     { type: string, format: uuid }
        url:    { type: string, format: uri }
        
    TrackDto:
      type: object
      properties:
        id:  { type: string, format: uuid }
        url: { type: string, format: uri }

    ApiError:
      type: object
      properties:
        timestamp: { type: string, format: date-time, example: "2025-05-21T15:42:01" }
        status:    { type: integer, example: 403 }
        error:     { type: string, example: Forbidden }
        message:   { type: string, example: Access is denied }
        path:      { type: string, example: /api/v1/users/123/photos }
