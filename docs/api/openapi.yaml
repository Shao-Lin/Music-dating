openapi: 3.0.1
info:
  title: Vibe API
  version: "1.0.0"
  description: |
    REST API музыкального дейтинга **Vibe**.  
    Авторизация — JWT-токен (Bearer) + Refresh-токен.  
    Все даты — `yyyy-MM-dd`, время — ISO 8601.

servers:
  - url: http://localhost:8080
    description: Local dev

security:
  - BearerAuth: [ ]

tags:
  - name: Auth
    description: Регистрация и аутентификация
  - name: Users
    description: Поиск, лайки, дизлайки, мэтчи
  - name: User
    description: Личный профиль и фото
  - name: Chat
    description: Диалоги и сообщения

paths:
  # ─────────── AUTH ───────────
  /auth/register:
    post:
      tags: [ Auth ]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
            encoding:
              image: { contentType: image/jpeg }
      responses:
        '200':
          description: Пользователь создан
          content:
            text/plain:
              schema: { type: string, example: User register successfully }
        '400': { $ref: '#/components/responses/BadRequest' }

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Логин (получение Access/Refresh-токенов)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRequest' }
            examples:
              default:
                value: { login: alice, password: pa$$w0rd }
      responses:
        '200':
          description: Токены выданы
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
              examples:
                default:
                  value:
                    accessToken: eyJhbGciOiJI…
                    refreshToken: 3d5e0c0b-…
        '401': { $ref: '#/components/responses/Unauthorized' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /auth/refresh:
    post:
      tags: [ Auth ]
      summary: Обновление Access-токена
      parameters:
        - in: header
          name: Authorization
          required: true
          schema: { type: string, example: Bearer 3d5e0c0b-… }
          description: Refresh-токен `Bearer <token>`
      responses:
        '200':
          description: Новый Access-токен
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    delete:
      tags: [ Auth ]
      summary: Выход и отзыв Refresh-токена
      parameters:
        - in: header
          name: Authorization
          required: true
          schema: { type: string, example: Bearer 3d5e0c0b-… }
      responses:
        '200':
          description: Refresh-токен удалён
          content:
            text/plain:
              schema: { type: string, example: Logout successfully }

  /auth/request-code:
    post:
      tags: [ Auth ]
      summary: Запрос OTP-кода
      parameters:
        - in: query
          name: email
          required: true
          schema: { type: string, format: email, example: alice@example.com }
      responses:
        '200': { description: Код выслан }

  /auth/verify-code:
    post:
      tags: [ Auth ]
      summary: Подтверждение OTP-кода
      parameters:
        - in: query
          name: email
          required: true
          schema: { type: string, format: email }
        - in: query
          name: code
          required: true
          schema: { type: string, example: "123456" }
      responses:
        '200': { description: Код верен }
        '401':
          description: Неверный код
          content:
            text/plain:
              schema: { type: string, example: Invalid code }

  # ─────────── USERS ───────────
  /users/recommendations:
    get:
      tags: [ Users ]
      summary: Рекомендации (непросмотренные пользователи)
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/matches:
    get:
      tags: [ Users ]
      summary: Мои взаимные мэтчи
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/likes/incoming:
    get:
      tags: [ Users ]
      summary: Кто меня лайкнул
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /users/{targetId}/like:
    post:
      tags: [ Users ]
      summary: Лайк пользователя
      parameters:
        - $ref: '#/components/parameters/TargetId'
      responses:
        '200':
          description: Статус мэтча
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ReactionResponse' }
      security: [ { BearerAuth: [ ] } ]

  /users/{targetId}/dislike:
    post:
      tags: [ Users ]
      summary: Дизлайк пользователя
      parameters:
        - $ref: '#/components/parameters/TargetId'
      responses:
        '204': { description: Дизлайк сохранён }
      security: [ { BearerAuth: [ ] } ]

  # ─────────── USER ───────────
  /user/me:
    get:
      tags: [ User ]
      summary: Профиль текущего пользователя
      responses:
        '200':
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserDto' }
      security: [ { BearerAuth: [ ] } ]

  /user/upload-photo:
    post:
      tags: [ User ]
      summary: Загрузить фото
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo: { type: string, format: binary }
      responses:
        '201': { description: Фото загружено }
        '400': { $ref: '#/components/responses/BadRequest' }
      security: [ { BearerAuth: [ ] } ]

  /user/{photoId}/delete-photo:
    delete:
      tags: [ User ]
      summary: Удалить фото
      parameters:
        - in: path
          name: photoId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: Фото удалено }
      security: [ { BearerAuth: [ ] } ]

  /user/edit-avatar:
    patch:
      tags: [ User ]
      summary: Обновить аватар
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Новый аватар (jpeg/png)
      responses:
        '204': { description: Аватар обновлён }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
      security: [ { BearerAuth: [ ] } ]

  # ─────────── CHAT ───────────
  /chat:
    post:
      tags: [ Chat ]
      summary: Создать или получить чат
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateChatRequest' }
      responses:
        '201':
          description: Чат создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ChatDto' }
      security: [ { BearerAuth: [ ] } ]

    get:
      tags: [ Chat ]
      summary: Список чатов (последнее сообщение + время обновления)
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ChatDto' }
      security: [ { BearerAuth: [ ] } ]

  /chat/{chatId}/messages:
    parameters:
      - in: path
        name: chatId
        required: true
        schema: { type: string }
    get:
      tags: [ Chat ]
      summary: История сообщений
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 30 }
      responses:
        '200':
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PageMessage' }
      security: [ { BearerAuth: [ ] } ]

    post:
      tags: [ Chat ]
      summary: Отправить сообщение
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/SendMessageRequest' }
            encoding:
              files: { contentType: "*/*" }
      responses:
        '201':
          description: Сообщение сохранено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MessageDto' }
      security: [ { BearerAuth: [ ] } ]

# ─────────── COMPONENTS ───────────
components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TargetId:
      in: path
      name: targetId
      required: true
      schema: { type: string, format: uuid }

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    Unauthorized:
      description: Требуется аутентификация
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }

  schemas:
    # --- auth ---
    RegisterRequest:
      type: object
      required: [ name, birthDate, gender, login, password ]
      properties:
        name:       { type: string }
        about:      { type: string }
        birthDate:  { type: string, format: date }
        city:       { type: string }
        gender:     { type: string }
        login:      { type: string }
        password:   { type: string }
        image:      { type: string, format: binary, description: Аватар }

    AuthRequest:
      type: object
      required: [ login, password ]
      properties:
        login:    { type: string }
        password: { type: string }

    AuthResponse:
      type: object
      properties:
        accessToken:  { type: string }
        refreshToken: { type: string }

    # --- social ---
    ReactionResponse:
      type: object
      properties:
        mutualMatch: { type: boolean }

    # --- users ---
    UserPhotoDto:
      type: object
      properties:
        id:  { type: string, format: uuid }
        url: { type: string, format: uri }

    TrackDto:
      type: object
      properties:
        id:  { type: string, format: uuid }
        url: { type: string, format: uri }

    UserDto:
      type: object
      properties:
        id:        { type: string, format: uuid }
        username:  { type: string }
        name:      { type: string }
        about:     { type: string }
        birthDate: { type: string, format: date }
        city:      { type: string }
        gender:    { type: string }
        avatarUrl: { type: string, format: uri }
        photos:
          type: array
          items: { $ref: '#/components/schemas/UserPhotoDto' }
        tracks:
          type: array
          items: { $ref: '#/components/schemas/TrackDto' }

    # --- chat ---
    CreateChatRequest:
      type: object
      required: [ participants ]
      properties:
        participants:
          type: array
          items: { type: string, format: uuid }

    MessagePreview:
      type: object
      properties:
        id:        { type: string }
        text:      { type: string }
        createdAt: { type: string, format: date-time }

    ChatDto:
      type: object
      properties:
        id:            { type: string }
        participantIds:
          type: array
          items: { type: string, format: uuid }
        lastMessage: { $ref: '#/components/schemas/MessagePreview' }
        updatedAt:   { type: string, format: date-time }

    SendMessageRequest:
      type: object
      properties:
        text:  { type: string }
        files:
          type: array
          items: { type: string, format: binary }

    MessageDto:
      type: object
      properties:
        id:        { type: string }
        chatId:    { type: string }
        senderId:  { type: string }           # хранится строкой
        text:      { type: string, nullable: true }
        mediaUrls:
          type: array
          items: { type: string, format: uri }
        createdAt: { type: string, format: date-time }

    PageMessage:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/MessageDto' }
        totalPages:  { type: integer }
        totalItems:  { type: integer }
        page:        { type: integer }
        size:        { type: integer }

    # --- errors ---
    ApiError:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status:    { type: integer }
        error:     { type: string }
        message:   { type: string }
        path:      { type: string }
