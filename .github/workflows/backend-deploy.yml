# File: .github/workflows/deploy-backend.yaml
name: "🚀 Deploy Backend (Production)"

on:
  push:
    branches: [tpproj-21]
    paths:
      - 'backend/**'

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # Шаг 1: Загрузка кода из репозитория
      - name: "🔄 Checkout Code"
        uses: actions/checkout@v4
        with:
          ref: tpproj-21
          fetch-depth: 0

      # Шаг 2: Очистка серверной директории
      - name: "🧹 Clean Server Directory"
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Очистка рабочей директории..."
            rm -rf /home/deployer/music-dating/backend/server/*
            rm -rf /home/deployer/music-dating/backend/server/.env
            rm -rf /home/deployer/music-dating/backend/server/docker-compose.yaml

      # Шаг 3: Копирование исходного кода
      - name: "🚚 Deploy Source Code"
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend/server/**"
          target: "/home/deployer/music-dating/backend/server"
          strip_components: 2
          overwrite: true
          tar_tmp_path: "/tmp"

      # Шаг 4: Копирование .env файла
      - name: "📦 Deploy Environment File"
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend/.github/env-files/backend.server.env"
          target: "/home/deployer/music-dating/backend/server/.env"
          overwrite: true

      # Шаг 5: Копирование docker-compose.yaml
      - name: "🚚 Deploy Docker Compose File"
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend/docker-compose.yaml"
          target: "/home/deployer/music-dating/backend/server/docker-compose.yaml"
          overwrite: true

      # Шаг 6: Установка прав доступа
      - name: "🔑 Set Permissions"
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            chown -R deployer:deployer /home/deployer/music-dating/backend/server
            chmod 644 /home/deployer/music-dating/backend/server/.env
            chmod 644 /home/deployer/music-dating/backend/server/docker-compose.yaml

      # Шаг 7: Сборка и запуск контейнеров
      - name: "🐳 Build & Start Containers"
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deployer/music-dating/backend/server
            docker-compose down --remove-orphans
            docker-compose up -d --build --force-recreate
            sleep 20

      # Шаг 8: Проверка работоспособности
      - name: "✅ Health Check"
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker exec music-dating-backend curl -sSf http://localhost:8080/actuator/health > /dev/null || exit 1

      # Шаг 9: Логи при ошибке
      - name: "📜 Failure Logs"
        if: ${{ failure() }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deployer/music-dating/backend/server
            docker-compose logs --tail=200
